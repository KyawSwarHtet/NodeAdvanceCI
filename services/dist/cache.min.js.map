{"version":3,"sources":["cache.js"],"names":["mongoose","require","redis","client","createClient","redisUrl","util","promisify","hget","Query","prototype","exec","options","arguments","length","undefined","this","hashKey","JSON","stringify","key","useCache","apply","_args","Object","assign","getQuery","collection","mongooseCollection","name","cachedValue","console","log","doc","parse","Array","isArray","map","d","_this","model","result","hset","clearHash","del"],"mappings":"aAAA,IAAMA,SAAWC,QAAQ,YACnBC,MAAQD,QAAQ,SADhBD,KAAQC,QAAGA,QACXC,SAAQD,yBAIRE,OAASD,MAAME,aAAaC,UAHlCF,OAAMG,KAAOL,KAAQM,UAArBJ,OAAAK,MAEA,IAAMH,KAAQL,SAAGS,MAAAC,UAAAC,KAEjBR,SAAOK,MAAOF,UAAKC,MAAUJ,WAA7B,IAAAS,EAAA,EAAAC,UAAAC,aAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAA,GAIAb,OAFAgB,KAAML,UAAOX,EAIXgB,KAAKC,QAAUC,KAAKC,UAAUP,EAAQQ,KAAO,IAFtCX,MAEPT,SAAKiB,MAALP,UAAoBS,KAAUP,WAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,KAAAA,EAAAA,UAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,GAC9BI,KAAOK,SADuBT,CAAAA,EAAAA,KAAAA,EAAAA,MAAAA,OAAAA,EAAAA,OAAAA,SAFhCD,KAAAW,MAAAN,KAAAO,IAEgCX,KAAAA,EAAAA,OAIAQ,EAAAF,KAAAC,UAM5BK,OAAOC,OAAO,GAAIT,KAAKU,WAAY,CANPC,WAAAX,KAAAY,mBAAAC,QAJAjB,EAAAA,KAAAA,EAAAA,mBAAAA,MAIAT,OAAAK,KAAAQ,KAAAC,QAAAG,IAJAR,KAAAA,EAAAA,GAIAkB,EAJAlB,EAAAA,KAAAA,OAIAmB,QAAAC,IACzB,yBADyBC,EAAAf,KAAAgB,MAAAJ,GAJAlB,EAAAA,OAAAA,SAIAuB,MAAAC,QAAAH,GAAAA,EAAAI,IAAA,SAAAC,GAAA,OAAA,IAAAC,EAAAC,MAAAF,KAoBxB,IAAItB,KAAKwB,MAAMP,IAxBSrB,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,GAAAA,OAAAA,EAAAA,KAAAA,GAAAA,mBAAAA,MAe9BD,KAAAW,MAAAN,KAAAO,IAf8BX,KAAAA,GAAAA,OAUO6B,EAVP7B,EAAAA,KAIAT,OAAAuC,KAAA1B,KAAAC,QAAAG,EAAAF,KAAAC,UAAAsB,IAJA7B,EAAAA,OAAAA,SAIA6B,GAJA7B,KAAAA,GAAAA,IAAAA,MAAAA,OAAAA,EAAAA,SAAAA,KAAAA,OAgBxBkB,OAAAA,QAAAA,CAqBNa,UArBMb,SAqBIb,GAjCoBd,OAAAyC,IAe1Bd,KAAAA,UAf0Bb","file":"cache.min.js","sourcesContent":["const mongoose = require(\"mongoose\");\r\nconst redis = require(\"redis\");\r\nconst util = require(\"util\");\r\n\r\nconst redisUrl = \"redis://127.0.0.1:6379\";\r\nconst client = redis.createClient(redisUrl);\r\nclient.hget = util.promisify(client.hget);\r\n\r\nconst exec = mongoose.Query.prototype.exec;\r\n\r\nmongoose.Query.prototype.cache = function (options = {}) {\r\n  this.useCache = true;\r\n  this.hashKey = JSON.stringify(options.key || \"\");\r\n  return this;\r\n};\r\n\r\nmongoose.Query.prototype.exec = async function () {\r\n  if (!this.useCache) {\r\n    return exec.apply(this, arguments);\r\n  }\r\n\r\n  const key = JSON.stringify(\r\n    Object.assign({}, this.getQuery(), {\r\n      collection: this.mongooseCollection.name,\r\n    })\r\n  );\r\n\r\n  // See if we have a value for 'key' in redis\r\n  const cachedValue = await client.hget(this.hashKey, key);\r\n\r\n  //if we do , return the cached value\r\n  if (cachedValue) {\r\n    console.log(\"fetching cached value\");\r\n    const doc = JSON.parse(cachedValue);\r\n    return Array.isArray(doc)\r\n      ? doc.map((d) => new this.model(d))\r\n      : new this.model(doc);\r\n\r\n    // return doc;\r\n  }\r\n\r\n  //Otherwise, issue the query and store the result in redis\r\n  const result = await exec.apply(this, arguments);\r\n\r\n  client.hset(this.hashKey, key, JSON.stringify(result));\r\n  return result;\r\n};\r\n\r\nmodule.exports = {\r\n  clearHash(hashKey) {\r\n    client.del(JSON.stringify(hashKey));\r\n  },\r\n};\r\n"]}