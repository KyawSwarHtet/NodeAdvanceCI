{"version":3,"sources":["cache.js"],"names":["mongoose","require","redis","util","redisUrl","client","createClient","hget","promisify","exec","Query","prototype","cache","options","useCache","hashKey","JSON","stringify","key","apply","Object","assign","getQuery","collection","mongooseCollection","name","cachedValue","console","log","doc","parse","Array","isArray","map","d","model","result","hset","module","exports","clearHash","del"],"mappings":";;AAAA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACA,IAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AACA,IAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AAEA,IAAMG,QAAQ,GAAG,wBAAjB;AACA,IAAMC,MAAM,GAAGH,KAAK,CAACI,YAAN,CAAmBF,QAAnB,CAAf;AACAC,MAAM,CAACE,IAAP,GAAcJ,IAAI,CAACK,SAAL,CAAeH,MAAM,CAACE,IAAtB,CAAd;AAEA,IAAME,IAAI,GAAGT,QAAQ,CAACU,KAAT,CAAeC,SAAf,CAAyBF,IAAtC;;AAEAT,QAAQ,CAACU,KAAT,CAAeC,SAAf,CAAyBC,KAAzB,GAAiC,YAAwB;AAAA,MAAdC,OAAc,uEAAJ,EAAI;AACvD,OAAKC,QAAL,GAAgB,IAAhB;AACA,OAAKC,OAAL,GAAeC,IAAI,CAACC,SAAL,CAAeJ,OAAO,CAACK,GAAR,IAAe,EAA9B,CAAf;AACA,SAAO,IAAP;AACD,CAJD;;AAMAlB,QAAQ,CAACU,KAAT,CAAeC,SAAf,CAAyBF,IAAzB,GAAgC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cACzB,KAAKK,QADoB;AAAA;AAAA;AAAA;;AAAA,2CAErBL,IAAI,CAACU,KAAL,CAAW,IAAX,QAFqB;;AAAA;AAKxBD,UAAAA,GALwB,GAKlBF,IAAI,CAACC,SAAL,CACVG,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKC,QAAL,EAAlB,EAAmC;AACjCC,YAAAA,UAAU,EAAE,KAAKC,kBAAL,CAAwBC;AADH,WAAnC,CADU,CALkB,EAW9B;;AAX8B;AAAA,0CAYJpB,MAAM,CAACE,IAAP,CAAY,KAAKQ,OAAjB,EAA0BG,GAA1B,CAZI;;AAAA;AAYxBQ,UAAAA,WAZwB;;AAAA,eAe1BA,WAf0B;AAAA;AAAA;AAAA;;AAgB5BC,UAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACMC,UAAAA,GAjBsB,GAiBhBb,IAAI,CAACc,KAAL,CAAWJ,WAAX,CAjBgB;AAAA,2CAkBrBK,KAAK,CAACC,OAAN,CAAcH,GAAd,IACHA,GAAG,CAACI,GAAJ,CAAQ,UAACC,CAAD;AAAA,mBAAO,IAAI,KAAI,CAACC,KAAT,CAAeD,CAAf,CAAP;AAAA,WAAR,CADG,GAEH,IAAI,KAAKC,KAAT,CAAeN,GAAf,CApBwB;;AAAA;AAAA;AAAA,0CA0BTpB,IAAI,CAACU,KAAL,CAAW,IAAX,QA1BS;;AAAA;AA0BxBiB,UAAAA,MA1BwB;AA4B9B/B,UAAAA,MAAM,CAACgC,IAAP,CAAY,KAAKtB,OAAjB,EAA0BG,GAA1B,EAA+BF,IAAI,CAACC,SAAL,CAAemB,MAAf,CAA/B;AA5B8B,2CA6BvBA,MA7BuB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAhC;;AAgCAE,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,SADe,qBACLzB,OADK,EACI;AACjBV,IAAAA,MAAM,CAACoC,GAAP,CAAWzB,IAAI,CAACC,SAAL,CAAeF,OAAf,CAAX;AACD;AAHc,CAAjB","sourcesContent":["const mongoose = require(\"mongoose\");\r\nconst redis = require(\"redis\");\r\nconst util = require(\"util\");\r\n\r\nconst redisUrl = \"redis://127.0.0.1:6379\";\r\nconst client = redis.createClient(redisUrl);\r\nclient.hget = util.promisify(client.hget);\r\n\r\nconst exec = mongoose.Query.prototype.exec;\r\n\r\nmongoose.Query.prototype.cache = function (options = {}) {\r\n  this.useCache = true;\r\n  this.hashKey = JSON.stringify(options.key || \"\");\r\n  return this;\r\n};\r\n\r\nmongoose.Query.prototype.exec = async function () {\r\n  if (!this.useCache) {\r\n    return exec.apply(this, arguments);\r\n  }\r\n\r\n  const key = JSON.stringify(\r\n    Object.assign({}, this.getQuery(), {\r\n      collection: this.mongooseCollection.name,\r\n    })\r\n  );\r\n\r\n  // See if we have a value for 'key' in redis\r\n  const cachedValue = await client.hget(this.hashKey, key);\r\n\r\n  //if we do , return the cached value\r\n  if (cachedValue) {\r\n    console.log(\"fetching cached value\");\r\n    const doc = JSON.parse(cachedValue);\r\n    return Array.isArray(doc)\r\n      ? doc.map((d) => new this.model(d))\r\n      : new this.model(doc);\r\n\r\n    // return doc;\r\n  }\r\n\r\n  //Otherwise, issue the query and store the result in redis\r\n  const result = await exec.apply(this, arguments);\r\n\r\n  client.hset(this.hashKey, key, JSON.stringify(result));\r\n  return result;\r\n};\r\n\r\nmodule.exports = {\r\n  clearHash(hashKey) {\r\n    client.del(JSON.stringify(hashKey));\r\n  },\r\n};\r\n"],"file":"cache.dev.js"}