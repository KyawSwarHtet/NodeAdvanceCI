{"version":3,"sources":["testing.js"],"names":["getFirstUniq","numList","numCounts","num","console","log","testArray","firstUnique"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA,IAAIA,YAAY,GAAG,SAAfA,YAAe,CAACC,OAAD,EAAa;AAC9B,MAAMC,SAAS,GAAG,EAAlB,CAD8B,CAG9B;;AAH8B;AAAA;AAAA;;AAAA;AAI9B,yBAAkBD,OAAlB,8HAA2B;AAAA,UAAhBE,GAAgB;AACzBD,MAAAA,SAAS,CAACC,GAAD,CAAT,GAAiB,CAACD,SAAS,CAACC,GAAD,CAAT,IAAkB,CAAnB,IAAwB,CAAzC;AACD;AAN6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOhCC,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAsBH,SAAtB,EAPgC,CAS9B;;AAT8B;AAAA;AAAA;;AAAA;AAU9B,0BAAkBD,OAAlB,mIAA2B;AAAA,UAAhBE,IAAgB;;AACzB,UAAID,SAAS,CAACC,IAAD,CAAT,KAAmB,CAAvB,EAA0B;AACxB,eAAOA,IAAP;AACD;AACF,KAd6B,CAgB9B;;AAhB8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiB9B,SAAO,IAAP;AACD,CAlBD;;AAoBA,IAAIG,SAAS,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,CAAhB;AAEA,IAAMC,WAAW,GAAGP,YAAY,CAACM,SAAD,CAAhC;AACAF,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BE,WAA5B","sourcesContent":["// const result = [\r\n//   \"B$u$i$ld\",\r\n//   \"$t$$h$e\",\r\n//   \"N$e$x$t\",\r\n//   \"E$$ra\",\r\n//   \"$$o$f$\",\r\n//   \"S$$of$t$wa$r$e\",\r\n//   \"De$$ve$l$op$me$n$t\",\r\n// ]\r\n//   .map((word) => word.replace(/\\$/g, \"\").toUpperCase())\r\n//   .join(\" \");\r\n\r\n// console.log(result);\r\n\r\n/******************************************************************************** */\r\n\r\n/* Fid Pair Sum */\r\n// function findPairSum(arr, target) {\r\n//   const seen = new Set();\r\n//   console.log(seen);\r\n//   for (const num of arr) {\r\n//     const complement = target - num;\r\n//     if (seen.has(complement)) {\r\n//       return [num, complement];\r\n//     }\r\n//     console.log(\"sem, \", seen);\r\n//     seen.add(num);\r\n//   }\r\n//   return null;\r\n// }\r\n// const exparray = [2, 3, 4, 5, 1, 2, 4, 5];\r\n// console.log(findPairSum(exparray, 9));\r\n\r\n/******************************************************************************** */\r\n\r\n/* char count question */\r\n// function countCharacters(str) {\r\n//   const charCount = {};\r\n\r\n//   // Remove spaces and convert the string to lowercase\r\n//   const cleanedStr = str.replace(/\\s/g, \"\").toLowerCase();\r\n\r\n//   // Iterate through the cleaned string\r\n//   for (const char of cleanedStr) {\r\n//     // If the character is not in the charCount object, initialize it with a count of 1\r\n//     if (!charCount[char]) {\r\n//       charCount[char] = 1;\r\n//     } else {\r\n//       // If the character is already in charCount, increment its count\r\n//       charCount[char]++;\r\n//     }\r\n//   }\r\n\r\n//   return charCount;\r\n// }\r\n\r\n// const str = \"hello how are you\";\r\n// const charFrequency = countCharacters(str);\r\n// console.log(charFrequency);\r\n\r\n/******************************************************************************** */\r\n/* Rotate Array */\r\n// function rotateArray(arr, steps) {\r\n//   const n = arr.length;\r\n//   steps = steps % n; // Handle steps greater than array length\r\n//   const rotated = arr.slice(n - steps).concat(arr.slice(0, n - steps));\r\n//   return rotated;\r\n// }\r\n// const exparray = [2, 3, 4, 5, 1, 2, 4, 5];\r\n// console.log(rotateArray(exparray, 2));\r\n\r\n// const myArr1 = [1, 2, [3, [4, 5, 6], 7], 8];\r\n// const result = [];\r\n\r\n// const CheckAnswer = (data) => {\r\n//   if (Array.isArray(data)) {\r\n//     // console.log(\"data\", data);\r\n//     data.map((res) => CheckAnswer(res));\r\n//   } else {\r\n//     result.push(data);\r\n//   }\r\n// };\r\n\r\n// CheckAnswer(myArr1);\r\n\r\n// console.log(result);\r\n\r\n// const result = myArr1.flat(2);\r\n// console.log(\"resu\", result);\r\n\r\n// const myArr = [1, 2, 3, 4, 5, 6];\r\n// const newArr = myArr.map((x) => x * 2);\r\n\r\n// console.log(\"new qrr\", newArr);\r\n\r\n/******************************************************************************** */\r\n// let text = \"hello how are you?\";\r\n// const result = {};\r\n// console.log(\"result\", result);\r\n\r\n// const cleardata = text.replace(/\\s/g, \"\").toLowerCase();\r\n\r\n// for (let data of cleardata) {\r\n//   if (result[data]) {\r\n//     result[data]++;\r\n//   } else {\r\n//     result[data] = 1;\r\n//   }\r\n// }\r\n\r\n// console.log(\"myarr\", result);\r\n\r\n/******************************************************************************** */\r\n\r\n// function mergeSortedArrays(arr1, arr2) {\r\n//   const merged = [...arr1, ...arr2];\r\n//   console.log(\"meerged\", merged);\r\n//   return merged.sort((a, b) => a - b);\r\n// }\r\n\r\n// const Arr1 = [3, 34, 22, 4, 1];\r\n// const Arr2 = [2, 3, 32, 5, 1, 5, 2, 3];\r\n\r\n// console.log(mergeSortedArrays(Arr1, Arr2));\r\n\r\n// const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Banana\", \"Mango\"];\r\n// console.log(fruits.includes(\"Banana\", 3));\r\n\r\n// const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\r\n// let text = fruits.join(\" and \");\r\n\r\n// const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\r\n// const keys = fruits.keys();\r\n// console.log(\"text\", keys);\r\n\r\n// const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\r\n// fruits.sort();\r\n// fruits.reverse();\r\n\r\n// const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\r\n// const myArray = fruits.valueOf();\r\n\r\n// console.log(\"fruits\", fruits);\r\n\r\n/******************************************************************************** */\r\n\r\n// var reverseWords = function (stringToReverse) {\r\n//   var splitString = stringToReverse.split(\" \"); //split only on space\r\n//   console.log(\"splitString\", splitString);\r\n//   var reversedStringArray = [];\r\n\r\n//   // reverse the array\r\n//   for (var i = 0; i < splitString.length; i++) {\r\n//     reversedStringArray.unshift(splitString[i]);\r\n//   }\r\n//   // array looks fine, want to test the join now\r\n//   console.log(\"revresrd\", reversedStringArray);\r\n\r\n//   var reversedString = reversedStringArray.join(\" \"); // return joined string from reversed array\r\n\r\n//   return reversedString;\r\n// };\r\n\r\n// let testStr = \"Allice, do you like Bob?\";\r\n// console.log(reverseWords(testStr));\r\n\r\n/******************************************************************************** */\r\n\r\n// let isSorted =  (arrayToTest) =>{\r\n//   if (arrayToTest.length <= 1) {\r\n//     // take care of cases where array is empty or has one element\r\n//     return true;\r\n//   }\r\n\r\n//   for (var i = 1; i < arrayToTest.length; i++) {\r\n//     if (arrayToTest[i - 1] > arrayToTest[i]) {\r\n//       // if the array has any places where the next element is smaller, it is not sorted lowest to highest\r\n//       return false;\r\n//     }\r\n//   }\r\n\r\n//   return true; // if we got through the loop, everything should be sorted properly\r\n// };\r\n\r\n/******************************************************************************** */\r\n// function generatePascalsTriangle(numRows) {\r\n//   const triangle = [];\r\n\r\n//   for (let i = 0; i < numRows; i++) {\r\n//     const row = [];\r\n\r\n//     for (let j = 0; j <= i; j++) {\r\n//       if (j === 0 || j === i) {\r\n//         console.log(\"j and i\", j, \"adn\", i);\r\n//         row.push(1);\r\n//       } else {\r\n//         const prevRow = triangle[i - 1];\r\n//         console.log(\"triangle\", triangle);\r\n//         console.log(\"pre role\", prevRow);\r\n//         row.push(prevRow[j - 1] + prevRow[j]);\r\n//       }\r\n//     }\r\n//     console.log(\"row\", row);\r\n//     triangle.push(row);\r\n//   }\r\n\r\n//   return triangle;\r\n// }\r\n\r\n// function printPascalsTriangle(triangle) {\r\n//   for (const row of triangle) {\r\n//     console.log(row.join(\" \"));\r\n//   }\r\n// }\r\n\r\n// const numRows = 6;\r\n// const pascalsTriangle = generatePascalsTriangle(numRows);\r\n// printPascalsTriangle(pascalsTriangle);\r\n\r\n// var pascalTriangle = function (numberOfLines) {\r\n//   var result = [];\r\n\r\n//   if (numberOfLines === 0) {\r\n//     return undefined;\r\n//   }\r\n\r\n//   result.push([1]); // we need to add them as arrays\r\n\r\n//   if (numberOfLines === 1) {\r\n//     return result;\r\n//   }\r\n\r\n//   result.push([1, 1]);\r\n\r\n//   if (numberOfLines === 2) {\r\n//     return result;\r\n//   }\r\n\r\n//   var createNextRow = function (lastRowCreated) {\r\n//     var newRowResult = [];\r\n\r\n//     newRowResult.push(1); //add first element\r\n//     for (var i = 1; i < lastRowCreated.length; i++) {\r\n//       //we are only creating the inner elements, shortened loop\r\n//       newRowResult.push(lastRowCreated[i - 1] + lastRowCreated[i]);\r\n//     }\r\n//     newRowResult.push(1); //add last element\r\n\r\n//     return newRowResult;\r\n//   };\r\n//   /// TESTING: createNextRow in console:::PASSED\r\n\r\n//   for (var i = 3; i <= numberOfLines; i++) {\r\n//     result.push(createNextRow(result[result.length - 1])); //pass in the last row we created\r\n//   }\r\n\r\n//   return result;\r\n// };\r\n\r\n// console.log(pascalTriangle(6));\r\n\r\n/******************************************************************************** */\r\n\r\n// let deFactorial = (num) =>\r\n//   num === 0 || num === 1 ? 1 : num * deFactorial(num - 1);\r\n\r\n// const result = deFactorial(8);\r\n// console.log(\"result\", result);\r\n\r\n// function doFactorial(num) {\r\n//   // Base case: factorial of 0 or 1 is 1\r\n//   if (num === 0 || num === 1) {\r\n//     return 1;\r\n//   } else {\r\n//     // Recursive case: multiply num by the factorial of (num - 1)\r\n//     return num * doFactorial(num - 1);\r\n//   }\r\n// }\r\n\r\n// // Example usage:\r\n// const result = doFactorial(8);\r\n// console.log(result); // Output will be 24\r\n\r\n/******************************************************************************** */\r\n\r\n// const promise = Promise.resolve(42)\r\n//   .then((value) => value - 42)\r\n//   .then((value) => value / value)\r\n//   .catch(() => -21)\r\n//   .then((value) => value && value.toString())\r\n//   .catch(() => 21)\r\n//   .then((value) => value.charCodeAt(0))\r\n//   .catch(() => 42)\r\n//   .then((value) => value * 2)\r\n//   .finally((value) => value + 5);\r\n\r\n// console.log(\"data\", promise);\r\n\r\n/******************************************************************************** */\r\n\r\nlet getFirstUniq = (numList) => {\r\n  const numCounts = {};\r\n\r\n  //Count for each number\r\n  for (const num of numList) {\r\n    numCounts[num] = (numCounts[num] || 0) + 1;\r\n  }\r\nconsole.log(\"numlist\",numCounts)\r\n\r\n  //Find the first unique number\r\n  for (const num of numList) {\r\n    if (numCounts[num] === 1) {\r\n      return num;\r\n    }\r\n  }\r\n\r\n  //if no unique number is found\r\n  return null;\r\n};\r\n\r\nlet testArray = [2, 3, 4, 5, 3, 7, 2, 8];\r\n\r\nconst firstUnique = getFirstUniq(testArray);\r\nconsole.log(\"first quique\", firstUnique);\r\n"],"file":"testing.dev.js"}